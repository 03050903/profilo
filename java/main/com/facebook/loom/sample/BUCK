load("//buck_imports:profilo_path.bzl", "profilo_path")

keystore(
    name = "keystore",
    properties = "sample.keystore.properties",
    store = "sample.keystore",
)

PROVIDER_TO_RULE = {
    "atrace": profilo_path("java/main/com/facebook/loom/provider/atrace:atrace"),
    "systemcounters": profilo_path("java/main/com/facebook/loom/provider/systemcounters:systemcounters"),
    "stacktrace": profilo_path("java/main/com/facebook/loom/provider/stacktrace:stacktrace"),
    "threadmetadata": profilo_path("java/main/com/facebook/loom/provider/threadmetadata:threadmetadata"),
    "processmetadata": profilo_path("java/main/com/facebook/loom/provider/processmetadata:processmetadata"),
    "yarn": profilo_path("java/main/com/facebook/loom/provider/yarn:yarn"),
}

def loom_sample_app(providers):
    if providers:
        providers = sorted(providers)
        providers_string = "-".join(providers)
        providers_deps = [PROVIDER_TO_RULE[provider] for provider in providers]
    else:
        providers_string = "none"
        providers_deps = []

    android_build_config(
      name = "sample-buildconfig-{}".format(providers_string),
      package = "com.facebook.loom",
      values = [
        "String PROVIDERS = \"{}\"".format(providers_string),
      ],
    )

    # We want all providers on the compile path but only package the ones that
    # the current config enables. However, the provided_deps take precedence
    # and targets specified in both provided and normal deps will be elided.
    #
    # Therefore, calculate the difference between the full set and the enabled
    # set and put only that in the provided list.

    provided_deps = [x for x in PROVIDER_TO_RULE.values()
                     if x not in providers_deps]

    android_library(
        name = "sample-lib-{}".format(providers_string),
        srcs = glob(["*.java"]),

        provided_deps = provided_deps,
        deps = [
            ":sample-buildconfig-{}".format(providers_string),
            profilo_path("java/main/com/facebook/loom/config:config"),
            profilo_path("java/main/com/facebook/loom/controllers/external:external"),
            profilo_path("java/main/com/facebook/loom/controllers/external/api:api"),
            profilo_path("java/main/com/facebook/loom/core:core"),
            profilo_path("deps/soloader:soloader"),
        ] + providers_deps,
        visibility = [
            "PUBLIC",
        ],
    )

    android_aar(
        name = "sample-aar-{}".format(providers_string),
        deps = [
            ":sample-lib-{}".format(providers_string),
        ],
        manifest_skeleton = "AndroidManifest.xml",
        visibility = [
            "PUBLIC",
        ],
    )

    android_binary(
        name = "sample-{}".format(providers_string),
        keystore = ":keystore",
        manifest = "AndroidManifest.xml",
        deps = [
            ":sample-lib-{}".format(providers_string),
        ],
    )

loom_sample_app(None)

# Referred to by open source buckconfig, don't forget to update it there.
loom_sample_app([
    "atrace",
    "stacktrace",
    "systemcounters",
    "threadmetadata",
])

loom_sample_app([
    "atrace",
    "stacktrace",
    "systemcounters",
    "threadmetadata",
    "processmetadata",
])

# Generate a target for each individual provider
for provider in PROVIDER_TO_RULE.keys():
    loom_sample_app([provider])
